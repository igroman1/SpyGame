from pprint import pprint
import requests
import json
import time
import copy


TOKEN = '73eaea320bdc0d3299faa475c196cfea1c4df9da4c6d291633f9fe8f83c08c4de2a3abf89fbc3ed8a44e1'
user_id = '171691064'
params = {
    'access_token': TOKEN,
    'v': 5.101,
    'user_id': user_id,
    'extended': 1
}

users_group_list = []
# Переменная для групп, в которых состоит только Евгений и никто из ее друзей
all_friends_group_list = []
# Переменная для групп всех друзей
all_users_group_list = []
# Переменная для групп Евгения
users_friends_list = []
# Переменная для списка друзей
final_list = []
# Переменная для детальной информации искомых групп

def My_groups():
  """Получаем список групп Евгения"""
  response = requests.get('https://api.vk.com/method/groups.get', params)

  all_users_group_dict = response.json()['response']['items']

  for group in all_users_group_dict:
    all_users_group_list.append(group['id'])
  return(all_users_group_list)


def Friends_list():
  """Получаем список друзей Евгения"""
  response_friends_list = requests.get(
      'https://api.vk.com/method/friends.get', params)
  users_friends_dict = response_friends_list.json()['response']['items']
  for friend in users_friends_dict:
    users_friends_list.append(friend)
  return(users_friends_list)


def Friend_groups():
  """Получаем группы друзей"""
  for ids in Friends_list():
    params = {
        'access_token': TOKEN,
        'v': 5.101,
        'user_id': ids}
    friend_group_dict = requests.get(
        'https://api.vk.com/method/groups.get', params)
    if friend_group_dict.json().get('error'):
      print(f'Аккаунт пользователя с id {ids} удален или заблокирован')
      time.sleep(1)
    else:
      all_friends_group_list.extend(
          friend_group_dict.json()['response']['items'])
      print(f'Обработка информации о пользователе с id {ids}')
      time.sleep(1)
  return(all_friends_group_list)


def Compare_groups():
  """Сравниваем группы Евгения с группами его друзей"""
  for group in all_users_group_list:
    if group not in all_friends_group_list:
      users_group_list.append(group)
  print(users_group_list)
  return(users_group_list)


def Detail_group():
    """Получаем детальную информацию о группах, в которых только Евгений"""
    
    for unique_group in users_group_list:
      params = {
          'access_token': TOKEN,
          'v': 5.101,
          'group_id': unique_group,
          'fields': 'members_count'}
      unique_group_request = requests.get(
          'https://api.vk.com/method/groups.getById', params)
      gropus = unique_group_request.json()
      if gropus.get('error') and (gropus['error']['error_msg'] == 'Too many requests per second'):
          print(f"\nПридётся подождать 3 секунду, из-за ошибки")
          time.sleep(3)
          gropus = unique_group_request.json()
      for grp in gropus['response']:
          gropus = {}
          gropus = {
            'name': grp['name'], 'gid': grp['id'], 'members_count': grp['members_count']}
          final_list.append(gropus.copy())
    return(final_list)

def main():
    print("\nПункт 1. Получаем список групп Евгения:")
    My_groups()
    print("\nПункт 2. Получаем список друзей Евгения:")
    Friends_list()
    print("\nПункт 3. Получаем группы друзей:")
    Friend_groups()
    print("\nПункт 4. Сравниваем группы Евгения с группами его друзей:")
    Compare_groups()
    print("\nПункт 5. Получаем детальную информацию о группах, в которых только Евгений:")
    Detail_group()
    print("\nПункт 6. Cохраняем информацию о группах в переменную:")
    with open("no_friends_groups.json", "w") as write_file:
      json.dump(final_list, write_file, ensure_ascii=False, indent=2)

main()

print('Выполнение программы успешно завершенно. С информацией о группах можете ознакомиться в файле "no_friends_groups.json"')
